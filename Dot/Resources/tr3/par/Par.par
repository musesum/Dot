/* this is manually maintained description of Par.boot ; it is not compiled
 * it could be out of sync, if changes were made to Par.boot, and not here
 * see Par.boot for more details
 */
def (par list)+
par (name)
list ("(" (waves | ors | ands | item | list)+ ")" repeat? )

  waves (item (wave (ors | ands | item))+ )
    wave ('^[\~][^A-Za-z0-9_]')

    orandits (ors | ands | item)
    andits (ands | item)

  ors (andits ("|" andits)+ ) // (a b | c d) == ((a b) | (c d))
  andits (ands | item | list)
  ands (item item+) // two or more items

  item ((named|quote|regx|ahead) pred?)

    named (name repeat?)
    quote ('^\\"([^\\"]*)\\"' opt?)
    regx  ('^([i]?\\'.*\\')' pred?)
    pred  ('=>\'(\w+)\')
    ahead ('^[\~]([a-z]+)')

  repeat (any mny opt quant)

    any ("*") // 0 to n
    mny ("+") // 1 to n
    opt ("?") // 0 or 1
           
    quant ("{" ((min comma max?) | (comma max) | exact) "}")
    min('^[0-9]+')
    max('^[0]?[0-9]+')
    exact('^[0]?[0-9]+')
           
name ('^([A-Za-z_]([A-Za-z0-9_])+)' )

cmt  ('^[/][/][ ]*(.*?)[\r\n]+|^[ \r\n\t]+')