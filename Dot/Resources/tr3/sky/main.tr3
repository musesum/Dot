sky.main {
    
    frame : 0
    
    sky {
        "sky/main"
        "sky/input"
        "sky/screen"
        "sky/cell"
        "sky/pal"
        "sky/osc"
        "sky/draw"
        "sky/time"
        "sky/recorder"
    }
    
    dot {
        "dot/dot"
        "dot/dot.cell.rule"
        "dot/shader.tile"
        "dot/cell.shift"
        "dot/cell.rule.add"
        "dot/cell.rule.melt"
        "dot/sky.brush"
        "dot/pal.main"
        "dot/dot.connect"
    }
    shader () {
        uniform {
            fade : (0...1=0)
        }
        fragment() {
            precision mediump float;
            varying highp vec2 vTexCoord;
            uniform mediump sampler2D drawBuf; // 2D texture
            uniform mediump sampler2D drawPal; // 256x1 color palette for texture
            uniform float fade; // fade key slider value
            void main () {
                vec4 realColor   = texture2D(drawBuf, vTexCoord.xy);
                vec4 falseColorB = texture2D(drawPal, vec2(realColor.b,0.));
                vec4 falseColorR = texture2D(drawPal, vec2(realColor.r,0.));
                float fadeInverse = 1.-fade;
                gl_FragColor = vec4(falseColorR.r * fadeInverse + falseColorB.r * fade,
                                    falseColorR.g * fadeInverse + falseColorB.g * fade,
                                    falseColorR.b * fadeInverse + falseColorB.b * fade, 1.);
            }
        }
        vertex() {
            attribute mediump vec4 aPosition;
            attribute mediump vec2 aTexCoord;
            varying mediump vec2 vTexCoord;
            void main() {
                gl_Position = aPosition;
                vTexCoord = aTexCoord.xy;
            }
        }
    }
}
