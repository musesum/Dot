dot.shader.tile {
    base {
        type  : "shader"
        title : "Tile"
        frame : (x:0 y:0 w:220 h:188)
        icon  : "shader.tile.png"
    }
    controls {
        ruleOn {
            type  : "button"
            title : "Active"
            frame : (x:166 y:6 w:48  h:32)
            icon  : "shader.tile.png"
            value : (0...1)
        }
        mirrorBox {
            type   : "box"
            title  : "Mirror"
            frame  : (x:10 y:106 w:56 h:56)
            radius : 10
            tap2   : (1 1)
            lag    : 0
            master : (0...1):1
            value  : (0 0):(0...1=0) <-> shader.uniform.mirror
        }
        repeatBox {
            type   : "box"
            title  : "Repeat"
            frame  : (x:80 y:52 w:120 h:120)
            radius : 10
            tap2   : (-1 -1)
            lag    : 0.5
            master : (0...1):1
            value  : (0 0):(0...1=0) <-> shader.uniform.repeat
        }
    }
    shader {
        uniform {
            fade   : (0...1=0)
            repeat : (x y):(0...1=0)
            mirror : (x y):(0...1=0)
        }
        // fragment and vertext use openGL syntax
        fragment() {
            
            precision highp float;
            varying highp vec2 vTexCoord;
            uniform sampler2D drawBuf; // 2D texture
            uniform sampler2D drawPal; // 256x1 color palette for texture
            
            uniform float fade; // fade key slider value
            uniform vec2 repeat;
            uniform vec2 mirror;
            
            void main () {
                
                vec2 m; // mirrored
            
                if (mirror.x < 0.5) {
                    m.x = mod(vTexCoord.x /* + s.x*repeat.x*/, repeat.x);
                }
                else {
                    m.x = mod(vTexCoord.x /* + s.x*repeat.x*/, repeat.x*2.);
                    if (m.x > repeat.x) {
                        m.x = repeat.x * 2.0 - m.x;
                    }
                }
                if (mirror.y < 0.5) {
                    m.y = mod(vTexCoord.y /* + s.y*repeat.y*/, repeat.y);
                }
                else {
                    m.y = mod(vTexCoord.y /* + s.y*repeat.y*/, repeat.y*2.);
                    if (m.y > repeat.y) {
                        m.y = repeat.y * 2.0 - m.y;
                    }
                }
                vec4 realColor = texture2D(drawBuf, vec2(m.x/repeat.x, m.y/repeat.y));
                vec4 falseColorB = texture2D(drawPal, vec2(realColor.b,0.));
                vec4 falseColorR = texture2D(drawPal, vec2(realColor.r,0.));
                
                float fadeInverse = 1.0 - fade;
                /*
                gl_FragColor = vec4(falseColorR.r * fadeInverse + falseColorB.r * fade,
                                    falseColorR.g * fadeInverse + falseColorB.g * fade,
                                    falseColorR.b * fadeInverse + falseColorB.b * fade, 1.0);
                 */
                gl_FragColor = texture2D(drawBuf, vTexCoord);
            }
        }
        vertex() {
            
            attribute vec4 aPosition;
            attribute vec2 aTexCoord;
            varying vec2 vTexCoord;
            
            void main() {
                gl_Position = aPosition;
                vTexCoord = aTexCoord.xy;
            }
        }
    }
}
